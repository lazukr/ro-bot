const logger = require('logger.js')("Divine Pride API Module");
const request = require('request');
const baseLink = "https://divine-pride.net";
const links = {
  api: `${baseLink}/api/database`,
  db: `${baseLink}/database`,
  sprite: `${baseLink}/images/@type/png/@id.png`,
  icon: `${baseLink}/Content/img/@icon.png`,
};

const types = {
  mob: {
    apiName: "Monster",
    typeName: "monster",
    iconName: "battle",
    spriteName: "mobs",
  },
  item: {
    apiName: "Item",
    typeName: "item",
    iconName: "equipment",
    spriteName: "item",
  },
};

const ELEMENT_LIST = [
  {
    "name" : "Neutral",
    "colour" : 16777215,
  },
  {
    "name" : "Water",
    "colour" : 8103905,
  },
  {
    "name" : "Earth",
    "colour" : 14331781,
  },
  {
    "name" : "Fire",
    "colour" : 16741749,
  },
  {
    "name" : "Wind",
    "colour" : 13303480,
  },
  {
    "name" : "Poison",
    "colour" : 4980344,
  },
  {
    "name" : "Holy",
    "colour" : 16777130,
  },
  {
    "name" : "Dark",
    "colour" : 10837995,
  },
  {
    "name" : "Ghost",
    "colour" : 7829367,
  },
  {
    "name" : "Undead",
    "colour" : 0,
  }
];

const ELEMENT_LEVEL_LIST = [
  "",
  "1",
  "2",
  "2",
  "4"
];

const SCALE_LIST = [
  "Small",
  "Medium",
  "Large",
];

const RACE_LIST = [
  "Formless",
  "Undead",
  "Brute",
  "Plant",
  "Insect",
  "Fish",
  "Demon",
  "Human",
  "Angel",
  "Dragon",
];

async function getApiJSON(message, args, apikey, type) {
  if (args.length === 0) {
    message.channel.send("Need to specify an id.");
    return;
  }

  args = args.length > 1 ? args[0] : args;

  if (isNaN(args)) {
    message.channel.send("Id needs to be an integer.");
    return;
  }
 
  logger.info(args);
  return getJSONReply(type, args, apikey)
    .then(json => {
      return json;
    })
    .catch(err => {
      logger.error(err);
    });
};

async function getJSONReply(type, id, key) {
  return new Promise((resolve, reject) => {
    const reply = request({
      url: getAPILink(type, id, key),
      json: true,
    }, (error, response, body) => {
      if (error || response.statusCode !== 200) {
        reject(new Error("An error occurred on request. Please try again."));
      }
      resolve(body);
    });
  });
};

function getElement(value) {
  return {
    type: ELEMENT_LIST[value % 10],
    level: ELEMENT_LEVEL_LIST[Math.floor(value / 20)],
  };
};
function getScale(value) {
  return SCALE_LIST[value];
};

function getRace(value) {
  return RACE_LIST[value];
};

function getSpriteLink(type, id) {
  return links.sprite
    .replace("@type", type)
    .replace("@id", id);
};

function getIconLink(iconName) {
  return links.icon
    .replace("@icon", iconName);
};

function getDBLink(type, id) {
  return `${links.db}/${type}/${id}`;
};

function getAPILink(type, id, apiKey) {
  return `${links.api}/${type}/${id}?apikey=${apiKey}`;
};


module.exports = {
  getApiJSON,
  getJSONReply,
  getElement,
  getScale,
  getRace,
  getSpriteLink,
  getIconLink,
  getDBLink,
  getAPILink,
  types,
};
