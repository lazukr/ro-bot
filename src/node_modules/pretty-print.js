const logger = require('logger.js')("Pretty Print Module: ");
const HEADERS = require('nova-market-commons').HEADERS;
const HIGHLIGHT = 'JSON';
const TBL_LIM = 1950;
const ENTRY_LIM = [50, 25, 20, 15, 10];

class PrettyTable {
  constructor(market) {
    this.id = market.id;
    this.name = market.name;
    this.header = market.table.header;
    this.headerKeys = Object.keys(this.header);
    this.contents = market.table.contents;
    this._makeMaxLengthCols();
    this._makeSeparators();
    this._pad();
    this._stringify();
    this._paginate();
  }

  _makeMaxLengthCols() {
    this.maxLengthCols = this.headerKeys.reduce((re, va) => {
      re[va] = Math.max(this.header[va].length,
        ...(this.contents.map(tr => {
        return tr[va].length;
      })));
      return re;
    }, {});
  }

  _stringify() {
    let table = [this.header];
    table.push(this.separators);
    table.push.apply(table, this.contents);
    
    table = table.map(tr => {
      return Object.values(tr).join(' | ');
    }); 
    
    this.header = table.shift();
    this.separators = table.shift();
    this.contents = table; 
  }

  _makeSeparators() {
    this.separators = this.headerKeys.reduce((re, va) => {
      re[va] = '-'.repeat(this.maxLengthCols[va]);
      return re;
    }, {});
  }

  _pad() {
    let table = [this.header];
    table.push.apply(table, this.contents);
    table = table.map(tr => {
      return this.headerKeys.reduce((re, va) => {
        re[va] = tr[va].padEnd(this.maxLengthCols[va]);
        return re;
      }, {});
    });
    
    this.header = table.shift();
    this.contents = table;
  }

  _paginate() {
    const rowLength = this.header.length + 2;
    const tableLength = this.contents.length; 
    
    let i = 0;
    while ((ENTRY_LIM[i] + 1) * rowLength > TBL_LIM) {
      i++;
    }    
    
    this.charPerMsg = ENTRY_LIM[i] * rowLength;
    this.entryPerPage = ENTRY_LIM[i];
    this.pages = Math.floor(tableLength / ENTRY_LIM[i]) + 1; 
  }
 
  getPage(page, filters) {
    
    
    
    
    
    const table = this.contents.slice(
      0 + this.entryPerPage * (page - 1),
      this.entryPerPage * page).join("\n");
    
    const msg = `\`\`\`${HIGHLIGHT}\n`
      + `${this.id} - ${this.name}\n\n`
      + `${this.header}\n`
      + `${this.separators}\n`
      + `${table}\n\n`
      + `Page ${page}/${this.pages}\n`
      + `\`\`\``;
    logger.info(msg);
    return msg;
  }

  print() {
    console.log(this.header);
    console.log(this.separators);
    this.contents.forEach(tr => {
      console.log(tr);
    });
  }
};

exports.PrettyTable = PrettyTable;
