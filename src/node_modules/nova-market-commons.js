const logger = require('logger.js')("nova-market module");
const rp = require('request-promise');
const cheerio = require('cheerio');
const sc = require('scrape-commons');
const dt = require('data-tables');

const MARKET_URL = 'https://www.novaragnarok.com';
const UNKNOWN = "Unknown";
const NOVA_VEND = "nova_vend";

const REFINE_FINDER = /^(<)?\+\d{1,2}$/;
const PAGE_FINDER = /^p\d{1,2}$/;
const ZENY_FINDER = /^(\d{1,3}(.\d+)?[kmb]|\d+)$/;
const QUOTE_FINDER = /^\".*\"$/;

const ERROR = Object.freeze({
  NONE: 0,
  UNKNOWN: 1,
  NO_RESULT: 2,
});

const HEADER_ABBRV = Object.freeze({
  ADDPROPS: "+ Props",
  REFINE: "Rfn",
});

const HEADERS = Object.freeze({
  QTY: "Qty",
  ITEM: "Item",
  PRICE: "Price",
  ADDPROPS: "Additional Properties",
  REFINE: "Refine",
  LOCATION: "Location",
});

const LOC_NAVI = Object.freeze({
  NOVA: "@sj",
  OTHER: "@navi",
});

async function getSearchData(name) {
  const qs = {
    "module": "item",
    "action": "index",
    "name": name,
  };
  const $ = await sc.getPage(MARKET_URL, qs);
  const search = getSearchTable($);
  
  if (!search) {
    return {
      name: name,
      error: ERROR.NO_RESULT,
    };
  }

  return {
    name: name,
    table: search,
    error: ERROR.NONE,
  };
}

async function getLiveMarketData(itemID) {
  // grab market info from page itself
  const qs = {
    "module": "vending",
    "action": "item",
    "id": itemID,
  };
  const $ = await sc.getPage(MARKET_URL, qs);
  const name = getItemNameFromId($);
  
  // unknown item
  //if (name == UNKNOWN) {
  //  return {
  //    name: name,
  //    error: ERROR.UNKNOWN,
  //  };
  //}
  
  const market = getMarketTable($);
  
  // no result case
  if (!market) {
    return {
      id: itemID,
      name: name,
      error: ERROR.NO_RESULT,
    };
  }

  return {
    id: itemID,
    name: name,
    table: market,
    error: ERROR.NONE,
  };
}

function getTable($) {
  const table = $('#itemtable').get(0);
  if (!table) {
    return null;
  }
  return table;
}

function getSearchTable($) {
  const table = getTable($);

  if (!table) {
    return null;
  }

  const search = dt.DataTable.rowify($, table, dt.MARKET_TABLE);
  return search;
}


function getMarketTable($) {
  // get table, headers and all rows
  const table = getTable($);
  // if table doesn't exist, then there are no results
  if (!table) {
    return null;
  }

  // get the rowified MarketTable object
  const market = dt.MarketTable.rowify($, table, dt.MARKET_TABLE); 
  // market related data manipulation
  market.abbreviate(HEADERS, HEADER_ABBRV);
  market.locToNavi(HEADERS, LOC_NAVI);
  market.strToIntCols(HEADERS.QTY);
  market.strToIntCols(HEADERS.PRICE);
  market.strToIntCols(HEADERS.REFINE);
  market.sort(HEADERS.PRICE);
  return market;
}

// gets the name of the item from the itemID
function getItemNameFromId($) {
  const header = $('h2').get(0);
  return $(header).find('a').text().trim();
}

function getFilters(args) {
  
  const refine = args.find(arg => {
    return arg.match(REFINE_FINDER);
  });

  const page = args.find(arg => {
    return arg.match(PAGE_FINDER);
  });

  const zeny = args.find(arg => {
    return arg.match(ZENY_FINDER);
  });

  if (zeny) {
    args = args.filter(arg => arg != zeny);
  }

  if (refine) {
    args = args.filter(arg => arg != refine);
  }

  if (page) {
    args = args.filter(arg => arg != page);
  }

  const price = zeny ? parseFloat(zeny) * (zeny.includes('k') ? 
    1000 : zeny.includes('m') ?
    1000000 : zeny.includes('b') ?
    1000000000 : 1) : undefined;

  const filters = {};
  filters[HEADERS.PRICE] = price; 
  filters[HEADERS.REFINE] = refine;
  filters[HEADERS.ADDPROPS] = args.map(arg => {
    // assumes that filters meant to apply to the same property 
    // comes in one string without space, separated by commas
    // e.g. a,b => look for a AND b within a property
    const res = arg.trim().split(',').map(x => x.trim().toLowerCase());
    return res; 
  });
  console.log(filters[HEADERS.ADDPROPS]);

  filters.page = page ? parseInt(page.slice(1)) : 1;
  return filters;
}


exports.getLiveMarketData = getLiveMarketData;
exports.getSearchData = getSearchData;
exports.getFilters = getFilters;
exports.ERROR = ERROR;
exports.HEADERS = HEADERS;
