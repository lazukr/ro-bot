const logger = require('logger.js')("nova-market module");
const rp = require('request-promise');
const cheerio = require('cheerio');
const sc = require('scrape-commons');
const dt = require('data-tables');

const MARKET_URL = 'https://www.novaragnarok.com';
const UNKNOWN = "Unknown";
const NOVA_VEND = "nova_vend";

const ERROR = Object.freeze({
  NONE: 0,
  UNKNOWN: 1,
  NO_RESULT: 2,
});

const HEADER_ABBRV = Object.freeze({
  ADDPROPS: "+ Props",
  REFINE: "Rfn",
});

const HEADERS = Object.freeze({
  QTY: "Qty",
  ITEM: "Item",
  PRICE: "Price",
  ADDPROPS: "Additional Properties",
  REFINE: "Refine",
  LOCATION: "Location",
});

const LOC_NAVI = Object.freeze({
  NOVA: "@sj",
  OTHER: "@navi",
});

async function getLiveMarketData(itemID) {
  // grab market info from page itself
  const qs = {
    "module": "vending",
    "action": "item",
    "id": itemID,
  };
  const $ = await sc.getPage(MARKET_URL, qs);
  const name = getItemNameFromId($);
  
  // unknown item
  if (name == UNKNOWN) {
    return {
      name: name,
      error: ERROR.UNKNOWN,
    };
  }
  
  const market = getMarketTable($);
  
  // no result case
  if (!market) {
    return {
      id: itemID,
      name: name,
      error: ERROR.NO_RESULT,
    };
  }

  return {
    id: itemID,
    name: name,
    table: market,
    error: ERROR.NONE,
  };
}

function getMarketTable($) {
  // get table, headers and all rows
  const table = $('#itemtable').get(0);
  // if table doesn't exist, then there are no results
  if (!table) {
    return null;
  }

  // get the rowified MarketTable object
  const market = dt.MarketTable.rowify($, table, dt.BY_TEXT); 
  // market related data manipulation
  market.abbreviate(HEADERS, HEADER_ABBRV);
  market.locToNavi(HEADERS, LOC_NAVI);
  market.strToIntCols(HEADERS.QTY);
  market.strToIntCols(HEADERS.PRICE);
  market.sort(HEADERS.PRICE);
  return market;
}

// gets the name of the item from the itemID
function getItemNameFromId($) {
  const header = $('h2').get(0);
  return $(header).find('a').text().trim();
}

exports.getLiveMarketData = getLiveMarketData;
exports.ERROR = ERROR;
exports.HEADERS = HEADERS;
