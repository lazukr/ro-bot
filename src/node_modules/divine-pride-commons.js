const logger = require('logger.js')("Divine Pride API Module");
const rp = require('request-promise');
const cheerio = require('cheerio');

const sc = require('scrape-commons');
const dt = require('data-tables');

const dpLink = 'https://divine-pride.net';
const dpItemLink = `${dpLink}/database/item/`;
const dpMobLink = `${dpLink}/database/monster/`;

const ERR_TYPE = Object.freeze({
  NO_ERROR: 0,
  PARAM_MISSING: 1,
  SEARCH_NOT_IMPLEMENTED: 2,
  NOT_A_NUMBER: 3,
  NOT_A_POSITIVE_INTEGER: 4,
  MOB_NOT_FOUND: 5,
  ITEM_NOT_FOUND: 6,
});

const NOT_FOUND = Object.freeze({
  MOB: "Monster not found",
  ITEM: "Item not found",
});

const ITEMINFO = Object.freeze({
  ID: 0,
  SELL_PRICE: 1,
  WEIGHT: 2,
  TYPE: 3,
  SUBTYPE: 4,
  LOCATION: 5,
});

const MOB_TABLE = Object.freeze({
  STATS: 0,
  ELEMENTS: 1,
});

function getItemInfo($) {
  const name = $('legend').first().text().trim();
  const description = $('table').first().find("tr td").eq(1)
    .html().trim()
    .replace(/<br>/gi, "\n")
    .replace(/<([^>]+)>/gi, "");
  const info = [];
  $('table').eq(1).find("tr td").each((i, elem) => {
    element = $(elem).text().trim();
    info.push(element);
  });
  const tables = {};

  const dropsTable = $('#drops').find('table');
  if (dropsTable.length) {
    tables.drops = dt.DataTable.rowify($, dropsTable);
  }
  //const sets = $('#sets');

  return {
    id: info[ITEMINFO.ID],
    name: name,
    description: description,
    //sellprice: parseInt(info[ITEMINFO.SELL_PRICE]),
    error: ERR_TYPE.NO_ERROR,
    tables: tables,
  }
}

function getErrorMessage(error) {
  switch(error) {
    case ERR_TYPE.PARAMS_MISSING:
      return "You need a parameter.";
    case ERR_TYPE.SEARCH_NOT_IMPLEMENTED:
      return "Search not implemented yet.";
    case ERR_TYPE.NOT_A_NUMBER:
      return "This is not a number.";
    case ERR_TYPE.NOT_A_POSITIVE_INTEGER:
      return "This is not a positive integer.";
    default:
      return "This is a new species of error.";
  }
}

function itemPrint(item) {
  return `${item.id} - ${item.name} \n\n${item.description}`; 
}

async function getItem(args, search = false) {
  if (args.length == 0) {
    return {
      error: ERR_TYPE.PARAMS_MISSING,
    }
  }
  
  if (search) {
    return {
      error: ERR_TYPE.SEARCH_NOT_IMPLEMENTED,
    } 
  }
  
  const ID = Number(args);
  
  if (isNaN(ID)) {
    return {
      error: ERR_TYPE.NOT_A_NUMBER,
    }
  }

  if (!Number.isInteger(ID) || ID < 1) {
    return {
      error: ERR_TYPE.NOT_A_POSITIVE_INTEGER,
    }
  }

  const page = await sc.getPage(`${dpItemLink}${ID}/`);
  return getItemInfo(page);
}

function getMobInfo($) {
  const name = $('legend').first().text().trim().split("\n")[0];
  if (name == NOT_FOUND.MOB) {
    return {
      error: ERR_TYPE.MOB_NOT_FOUND,
    }
  }
  const tables = {};

  const statsTable = $('table').eq(MOB_TABLE.STATS);
  const elemTable = $('table').eq(MOB_TABLE.ELEMENTS);
  const dropsTable = $('#drops').find('table').first();
  tables.stats = sc.rowify($, statsTable, sc.BY_TEXT);
  tables.elements = sc.rowify($, elemTable, sc.BY_TEXT);
  tables.drops = sc.rowify($, dropsTable, sc.BY_TEXT);
  console.log(tables);
  console.log(name);
  console.log(tables.stats.contents);
  console.log(tables.elements.contents);
  console.log(tables.drops.contents);

}


async function getMob(args, search = false) {
  if (args.length == 0) {
    return {
      error: ERR_TYPE.PARAMS_MISSING,
    }
  }
  
  if (search) {
    return {
      error: ERR_TYPE.SEARCH_NOT_IMPLEMENTED,
    } 
  }
  
  const ID = Number(args);
  
  if (isNaN(ID)) {
    return {
      error: ERR_TYPE.NOT_A_NUMBER,
    }
  }

  if (!Number.isInteger(ID) || ID < 1) {
    return {
      error: ERR_TYPE.NOT_A_POSITIVE_INTEGER,
    }
  }

  const page = await sc.getPage(`${dpMobLink}${ID}/`);
  return getMobInfo(page);
}

exports.getItem = getItem;
exports.getMob = getMob;
exports.getErrorMessage = getErrorMessage;
exports.itemPrint = itemPrint;
